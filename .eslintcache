[{"/Users/benjaminpitts/Desktop/projects/quiz/quiz_frontend/src/App.js":"1","/Users/benjaminpitts/Desktop/projects/quiz/quiz_frontend/src/components/Quiz.js":"2"},{"size":4136,"mtime":1612219505356,"results":"3","hashOfConfig":"4"},{"size":1629,"mtime":1612219505357,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"11cqtz7",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/benjaminpitts/Desktop/projects/quiz/quiz_frontend/src/App.js",["11","12"],"import React, { Component } from 'react'\nimport Quiz from './components/Quiz'\nimport axios from 'axios'\n\nclass App extends Component {\n  state = {\n    question: '',\n    answer: '',\n    answer_char: '',\n    point_value: '',\n    input: '',\n    correct: '',\n    points: 0,\n    quizq: [],\n  }\n\n  handleChange = (event) => {\n      this.setState({\n        [event.target.id]: event.target.value,\n        input: event.target.value\n      })\n    }\n\n    handleSubmit = (event) => {\n      // event.preventDefault()\n      axios.post('/quiz', this.state).then((response) => {\n        console.log(response.data)\n        this.setState({\n          quizq: [response.data],\n          question: response.data.question,\n          answer: response.data.answer,\n          answer_char: response.data.answer_char,\n          point_value: parseInt(response.data.point_value)\n        })\n      })\n    }\n\n    updateQuestion = (event) => {\n      event.preventDefault()\n      event.target.reset()\n      const id = event.target.id\n      axios.put('/quiz/' + id, this.state).then((response) => {\n        this.getQuestion()\n      })\n    }\n\n    deleteQuestion = (event) => {\n      axios.delete('/quiz/' + event.target.value).then((response) => {\n        this.getQuestion()\n      })\n    }\n\n    getQuestion = () => {\n      axios\n      .get('/quiz')\n      .then(\n        (response) => this.setState({\n          quizq: response.data,\n          question: response.data[0].question,\n          answer: response.data[0].answer,\n          answer_char: response.data[0].answer_char,\n          point_value: parseInt(response.data[0].point_value)\n        }),\n        (err) => console.error(err)\n      )\n      .catch((error) => console.error(error))\n    }\n\n    isCorrect=()=>{\n      this.setState({\n        correct:'CORRECT!'\n      })\n    }\n    isIncorrect=(event)=>{\n      this.setState({\n        correct:'INCORRECT!'\n      })\n          if (this.state.points < 0) {\n            this.youLose()\n          }\n    }\n    youLose=()=>{\n        this.setState({\n          correct: 'YOU CLEARLY NEED MORE PRACTCE!'\n        })\n    }\n\n    componentDidMount = () => {\n      this.getQuestion()\n    }\n\n    addPoints=()=>{\n      this.setState({\n        points: this.state.points += this.state.point_value\n      })\n    }\n\n    removePoints=()=>{\n      this.setState({\n        points:this.state.points -= this.state.point_value\n      })\n    }\n\n    isTrue=(event)=>{\n        console.log(this.state)\n        if(this.state.answer_char === this.state.input.toUpperCase()) {\n          this.isCorrect()\n          this.addPoints()\n          this.getQuestion()\n          event.preventDefault()\n        } else {\n          this.isIncorrect()\n          this.removePoints()\n          event.preventDefault()\n          event.target.reset()\n        }\n      }\n\n\nrender = () => {\nreturn (\n<div className='container'>\n  <div id='headerBar'>\n    <div><h1>Quiz.js</h1></div>\n    <div></div>\n    <div></div>\n  </div>\n  <div className='main'>\n  <details>\n    <summary>createNewQuestion:</summary>\n      <form onSubmit={this.handleSubmit}>\n      <label htmlFor='question'>enterQuestion:</label>\n      <input type='text' id='question' onChange={this.handleChange} />\n      <br />\n      <label htmlFor='answer'>choices(A,B,C,D):</label>\n      <input type='text' id='answer' onChange={this.handleChange} />\n      <br />\n      <label htmlFor='answer_char'>answer(A,B,C,D):</label>\n      <input type='text' id='answer_char' onChange={this.handleChange} />\n      <br />\n      <label htmlFor='point_value'>pointValue:</label>\n      <input type='text' id='point_value' onChange={this.handleChange} />\n      <br />\n      <input type='submit' value='createQuestion' />\n      </form>\n</details>\n<br />\n<h2>currentPoints: {this.state.points}</h2>\n\n<div className='quiz'>\n  {this.state.quizq.map((quiz) => {\n\n    return  <Quiz quiz={quiz} key={quiz.id}\n    updateQuestion={this.updateQuestion}\n    deleteQuestion={this.deleteQuestion}\n    handleChange={this.handleChange}\n    isTrue={this.isTrue}\n    />\n})}\n\n<div className='correct'>\n<h2>{this.state.correct}</h2>\n</div>\n\n      </div>\n    </div>\n</div>\n    )\n\n  }\n}\n\n\nexport default App;\n","/Users/benjaminpitts/Desktop/projects/quiz/quiz_frontend/src/components/Quiz.js",[],{"ruleId":"13","severity":1,"message":"14","line":94,"column":17,"nodeType":"15","endLine":94,"endColumn":27},{"ruleId":"13","severity":1,"message":"14","line":100,"column":16,"nodeType":"15","endLine":100,"endColumn":26},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression"]